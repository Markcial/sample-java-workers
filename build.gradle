/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'marcgarcia' at '13/10/16 20:18' with Gradle 3.0
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'groovy'
apply plugin: 'application'

mainClassName = 'Application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.scala-lang:scala-library:2.10'
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'com.typesafe.akka:akka-actor_2.10:2.3.0'
    compile 'com.typesafe.akka:akka-remote_2.10:2.3.0'
    compile 'com.typesafe.akka:akka-cluster_2.10:2.3.0'
    testCompile 'junit:junit:4.12'
}

compileGroovy.mustRunAfter compileScala

jar {
    manifest {
        attributes 'Main-Class': mainClassName,
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
    }
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task dockerize(dependsOn: [build]) << {
    def p = "docker build -t jworker .".execute()
    p.waitForProcessOutput((OutputStream)System.out, (OutputStream)System.err)
}
